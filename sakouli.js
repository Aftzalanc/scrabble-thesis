//INCORPORATING MODULES
export default class sakouli {
  constructor() {
    this.totalAmountOfLetters = 104;

    this.letter = [
      "Α",
      "Β",
      "Γ",
      "Δ",
      "Ε",
      "Ζ",
      "Η",
      "Θ",
      "Ι",
      "Κ",
      "Λ",
      "Μ",
      "Ν",
      "Ξ",
      "Ο",
      "Π",
      "Ρ",
      "Σ",
      "Τ",
      "Υ",
      "Φ",
      "Χ",
      "Ψ",
      "Ω",
      "*",
    ];
    this.value = [
      1, 8, 4, 4, 1, 10, 1, 10, 1, 2, 3, 3, 1, 10, 1, 2, 2, 1, 1, 2, 8, 8, 10,
      3, 0,
    ];
    this.counter = [
      12, 1, 2, 2, 8, 1, 7, 1, 8, 4, 3, 3, 6, 1, 9, 4, 5, 7, 8, 4, 1, 1, 1, 3,
      2,
    ];
  }

  // Method to show all letters
  showLetters() {
    return this.letter;
  }

  // Method to show all letter values
  showLetterValue() {
    return this.value;
  }

  // Method to show all counters
  showCounters() {
    return this.counter;
  }

  // Method to show all values
  showValues() {
    const values = Object.values(this); // Extract values from the object
    return values;
  }

  decreaseCounter(pos) {
    this.counter[pos] = this.counter[pos] - 1;
    this.totalAmountOfLetters = this.totalAmountOfLetters - 1;
  }

  increaseCounter(pos) {
    this.counter[pos] = this.counter[pos] + 1;
    this.totalAmountOfLetters = this.totalAmountOfLetters + 1;
  }

  /*Get a random number between 0 and 24 (needed to pick letters from the tile bag. It corresponds to positions in "letter" array)
  REVISED: Get a random number between 0 and totalAmountOfLetters. That way we take into consideration the chances
  of each letter appearing (for example "α", that exists (has a counter of) 12 times is more likely to appear than "θ").
  That means that we need a method that will loop through the counters and create a new array based on how many letters
  are left inside the tile bag. For example there are 5 letters left inside the tile bag. The loop starts
  from 0 to 24(checking the counter of each letter). But the counter[0] ("α") is 0 and so is counter[1] ("β").
  That means that these counters can be ignored in the making of our new array. Let's say that we are left only with
  1 "γ", 2 "η" and 2 "ο". Our new array will look like this: ["γ", "γ", "η", "η", "ο", "ο"]. The random number we get through
  getRandomNum method is 2. We now choose position [2], out of our new array and return the corresponding letter (in this case "η").
  Now we have to take that letter, search for where it is in the "letter" array, get the number of its position, 
  then give that to changeCounter so its counter and the totalAmountOfLetters decrease by 1 and also return that letter 
  through getLetter. */
  getRandomNum() {
    const minCeiled = Math.ceil(0);
    const maxFloored = Math.floor(this.totalAmountOfLetters - 1);
    return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled); // The maximum is inclusive and the minimum is inclusive
  }

  /*method that will loop through the counters and create a new array based on how many letters
  are left inside the tile bag. For example there are 5 letters left inside the tile bag. The loop starts
  from 0 to 24(checking the counter of each letter). But the counter[0] ("α") is 0 and so is counter[1] ("β").
  That means that these counters can be ignored in the making of our new array. Let's say that we are left only with
  1 "γ", 2 "η" and 2 "ο". Our new array will look like this: ["γ", "γ", "η", "η", "ο", "ο"].*/
  tempLetterArrayCreator() {
    let temp = []; //new temporary array
    let j = 0; //counter for where we have progressed in adding letters in temp array
    for (let i = 0; i <= 24; i++) {
      //loop through all the letters
      const x = this.counter[i]; //make x take the value of the counter that corresponds to each letter
      if (x > 0) {
        //if the counter is not 0, meaning there are still these types of letters in the tile bag
        for (let k = 0; k < x; k++) {
          //for all the letters of that type that are left
          temp[j + k] = this.letter[i]; //add them in the new temporary array
        }
        j = j + x; //move further in the array to add the new letters
      }
    }

    return temp;
  }

  getLetter(amountOfLettersThePlayerUsed) {
    if (this.totalAmountOfLetters > 0) {
      /*the amountOfLettersThePlayerUsed is the amount of letters we need to return with this method. First round it is 7, 
      since no player has any letters. We need to decrease it by one each time we find a letter that exists in the array
      and its counter is >0, meaning there are still letters like that in the tile bag. For example the random number 
      generated by the getRandomNum method is 0. The letter that corresponds to that position in the array "letter"
      is "α". We check if the counter for that letter (in this case counter[0]) is >0. If it is, then we decrease that by 1
      and we also decrease the totalAmountOfLetters by 1 (we take a letter from the tile bag). Then we return that letter 
      so that we can visualise it as a tile for the user with the UI and to also keep track of the letters the player/computer
      can create words with.
      IF the counter for that letter (in this case counter[0]) is 0, then we have to run the getRandomNum method again until
      we find a letter that exists in the tile bag (has a positive counter).*/

      let rrr = []; //create a temp array to return in the end
      while (amountOfLettersThePlayerUsed > 0) {
        //amountOfLettersThePlayerUsed
        const randomNum = this.getRandomNum(); //assign random number
        const newTempArray = this.tempLetterArrayCreator(); //create a temporary array with the letters left in the tile bag
        const letterGotten = newTempArray[randomNum]; //assign a letter that corresponds to that position in the temp array
        for (let i = 0; i <= 24; i++) {
          //search among all the possible letters
          if (letterGotten == this.letter[i]) {
            //when you find the letter inside the "letter" array
            this.decreaseCounter(i); //call the changeCounter method to decrease the counter and the totalAmountOfLetters
            rrr.push(letterGotten); //add that letter in the temp array which will be the letters the player got from the tile bag
            amountOfLettersThePlayerUsed = amountOfLettersThePlayerUsed - 1; //decrease the amount of letters left to take by 1
          }
        }
      }
      return rrr;
    }
  }

  /*player returns letters*/
  putLetter(LettersThePlayerWantsToChange) {
    if (this.totalAmountOfLetters >= 7) {
      //the tile bag has to have 7 letters or more for the player to be allowed to change letters

      let amountOfLettersThePlayerWantsToChange =
        LettersThePlayerWantsToChange.length;

      let temp = []; //create a temp array to return in the end
      temp = this.getLetter(amountOfLettersThePlayerWantsToChange); //get new letters for the player

      for (let i = 0; i <= amountOfLettersThePlayerWantsToChange; i++) {
        for (let j = 0; j <= 24; j++) {
          //search among all the possible letters
          if (LettersThePlayerWantsToChange[i] == this.letter[j]) {
            //when you find the letter inside the "letter" array

            this.increaseCounter(j); //call the increaseCounter method to increase the counter and the totalAmountOfLetters
          }
        }
      }

      return temp;
    }
  }

  // METHOD TO GET THE POINTS OF EACH LETTER OF THE WORD GIVEN AND ADD THEM UP
  getPoints(lexi) {
    let points = 0; //create a variable for the points of a word
    const str = lexi; //save the word we received as a string (str) to split it
    const arr = str.split(""); //split the word into an array (arr)

    for (let i = 0; i <= arr.length; i++) {
      for (let j = 0; j <= 24; j++) {
        //search among all the possible letters
        if (arr[i] == this.letter[j]) {
          //when you find the letter inside the "letter" array
          points += this.value[j]; //add the point value of that specific letter to the entire points of the word
        }
      }
    }

    return points;
  }
}
